{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thomas\\\\Documents\\\\GitHub\\\\cs378-p3\\\\src\\\\components\\\\WeatherList.js\";\nimport React, { useState } from 'react';\nimport SongDisplay from \"./SongDisplay\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherList = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n};\n_c = WeatherList;\nexport const displayWeather = async name => {\n  const res = await getCity(name);\n  return;\n};\nconst getCity = async name => {\n  console.log({\n    name\n  }.name);\n  console.log('https://geocoding-api.open-meteo.com/v1/search?name=' + {\n    name\n  }.name.replace(\" \", \"+\"));\n  try {\n    const res = await fetch('https://geocoding-api.open-meteo.com/v1/search?name=' + {\n      name\n    }.name);\n    const results = await res.json();\n    console.log(results.results[0]);\n    if (results.results && results.results.length > 0) {\n      const result = results.results[0];\n      console.log({\n        result\n      }.result);\n      fetch('https://geocoding-api.open-meteo.com/v1/forecast?latitude=' + {\n        result\n      }.result.latitude + '&longitude=' + {\n        result\n      }.result.longitude + '&temperature_unit=fahrenheit&timezone=CST&daily=sunset', {\n        mode: 'no-cors'\n      }).then(response => {\n        const weather = response.json();\n      });\n      return;\n    } else {\n      alert(\"Could not find city \" + {\n        name\n      }.name);\n      return null;\n    }\n  } catch (error) {\n    console.log({\n      error\n    });\n    alert(\"Error in finding city \" + {\n      name\n    }.name);\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"WeatherList\");","map":{"version":3,"names":["React","useState","SongDisplay","jsxDEV","_jsxDEV","WeatherList","fileName","_jsxFileName","lineNumber","columnNumber","_c","displayWeather","name","res","getCity","console","log","replace","fetch","results","json","length","result","latitude","longitude","mode","then","response","weather","alert","error","$RefreshReg$"],"sources":["C:/Users/Thomas/Documents/GitHub/cs378-p3/src/components/WeatherList.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport SongDisplay from \"./SongDisplay\"\r\n\r\nconst WeatherList = () => {\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {/* {songs.map(item => (\r\n                <SongDisplay key={item.id} item={item}/>\r\n            ))} */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const displayWeather = async (name) => {\r\n    const res = await getCity(name);\r\n    return\r\n} \r\n\r\nconst getCity = async (name) => {\r\n    console.log({name}.name);\r\n    console.log('https://geocoding-api.open-meteo.com/v1/search?name=' + {name}.name.replace(\" \", \"+\"));\r\n    try {\r\n        const res = await fetch('https://geocoding-api.open-meteo.com/v1/search?name=' + {name}.name);\r\n        const results = await res.json();\r\n        console.log(results.results[0]);\r\n        if (results.results && results.results.length > 0) {\r\n            const result = results.results[0];\r\n            console.log({result}.result);\r\n            fetch('https://geocoding-api.open-meteo.com/v1/forecast?latitude=' + {result}.result.latitude + '&longitude=' + {result}.result.longitude + '&temperature_unit=fahrenheit&timezone=CST&daily=sunset', {mode: 'no-cors'})\r\n                .then(response => {\r\n                    const weather = response.json();\r\n  })\r\n            \r\n\r\n            \r\n            \r\n            \r\n            \r\n            return \r\n\r\n\r\n\r\n        } else {\r\n            alert(\"Could not find city \" + {name}.name);\r\n            return null;\r\n        }\r\n    } catch (error) {\r\n        console.log({error});\r\n        alert(\"Error in finding city \" + {name}.name);\r\n    }\r\n}"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,eAAe;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAMtB,oBACID,OAAA;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAIK,CAAC;AAEd,CAAC;AAAAC,EAAA,GAbKL,WAAW;AAejB,OAAO,MAAMM,cAAc,GAAG,MAAOC,IAAI,IAAK;EAC1C,MAAMC,GAAG,GAAG,MAAMC,OAAO,CAACF,IAAI,CAAC;EAC/B;AACJ,CAAC;AAED,MAAME,OAAO,GAAG,MAAOF,IAAI,IAAK;EAC5BG,OAAO,CAACC,GAAG,CAAC;IAACJ;EAAI,CAAC,CAACA,IAAI,CAAC;EACxBG,OAAO,CAACC,GAAG,CAAC,sDAAsD,GAAG;IAACJ;EAAI,CAAC,CAACA,IAAI,CAACK,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;EACnG,IAAI;IACA,MAAMJ,GAAG,GAAG,MAAMK,KAAK,CAAC,sDAAsD,GAAG;MAACN;IAAI,CAAC,CAACA,IAAI,CAAC;IAC7F,MAAMO,OAAO,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,CAAC;IAChCL,OAAO,CAACC,GAAG,CAACG,OAAO,CAACA,OAAO,CAAC,CAAC,CAAC,CAAC;IAC/B,IAAIA,OAAO,CAACA,OAAO,IAAIA,OAAO,CAACA,OAAO,CAACE,MAAM,GAAG,CAAC,EAAE;MAC/C,MAAMC,MAAM,GAAGH,OAAO,CAACA,OAAO,CAAC,CAAC,CAAC;MACjCJ,OAAO,CAACC,GAAG,CAAC;QAACM;MAAM,CAAC,CAACA,MAAM,CAAC;MAC5BJ,KAAK,CAAC,4DAA4D,GAAG;QAACI;MAAM,CAAC,CAACA,MAAM,CAACC,QAAQ,GAAG,aAAa,GAAG;QAACD;MAAM,CAAC,CAACA,MAAM,CAACE,SAAS,GAAG,wDAAwD,EAAE;QAACC,IAAI,EAAE;MAAS,CAAC,CAAC,CACnNC,IAAI,CAACC,QAAQ,IAAI;QACd,MAAMC,OAAO,GAAGD,QAAQ,CAACP,IAAI,CAAC,CAAC;MACjD,CAAC,CAAC;MAOQ;IAIJ,CAAC,MAAM;MACHS,KAAK,CAAC,sBAAsB,GAAG;QAACjB;MAAI,CAAC,CAACA,IAAI,CAAC;MAC3C,OAAO,IAAI;IACf;EACJ,CAAC,CAAC,OAAOkB,KAAK,EAAE;IACZf,OAAO,CAACC,GAAG,CAAC;MAACc;IAAK,CAAC,CAAC;IACpBD,KAAK,CAAC,wBAAwB,GAAG;MAACjB;IAAI,CAAC,CAACA,IAAI,CAAC;EACjD;AACJ,CAAC;AAAA,IAAAF,EAAA;AAAAqB,YAAA,CAAArB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}