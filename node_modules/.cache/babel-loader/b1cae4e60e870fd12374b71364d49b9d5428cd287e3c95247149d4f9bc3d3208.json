{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Thomas\\\\Documents\\\\GitHub\\\\cs378-p3\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState } from 'react';\nimport SongList, { displayWeather } from \"./components/WeatherList\";\nimport { fetchWeatherApi } from 'openmeteo';\n\n// import 'bootstrap/dist/css/bootstrap.min.css'; // This imports bootstrap css styles. You can use bootstrap or your own classes by using the className attribute in your elements.\n\n// Menu data. An array of objects where each object represents a menu item. Each menu item has an id, title, description, image name, and price.\n// You can use the image name to get the image from the images folder.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst menuItems = [{}];\nconst App = () => {\n  _s();\n  const [search, setSearch] = useState(\"\");\n  const [weather, setWeather] = useState([]);\n  const searchCity = () => {\n    return getCity(search);\n  };\n  const getCity = async name => {\n    console.log({\n      name\n    }.name);\n    console.log('https://geocoding-api.open-meteo.com/v1/search?name=' + {\n      name\n    }.name);\n    try {\n      const res = await fetch('https://geocoding-api.open-meteo.com/v1/search?name=' + {\n        name\n      }.name);\n      const results = await res.json();\n      console.log(results.results[0]);\n      if (results.results && results.results.length > 0) {\n        const params = {\n          \"latitude\": results.results[0].latitude,\n          \"longitude\": results.results[0].latitude,\n          \"hourly\": \"precipitation_probability\",\n          \"timezone\": \"America/Chicago\",\n          \"forecast_days\": 1\n        };\n        const url = \"https://api.open-meteo.com/v1/forecast\";\n        const responses = await fetchWeatherApi(url, params);\n\n        // Helper function to form time ranges\n        const range = (start, stop, step) => Array.from({\n          length: (stop - start) / step\n        }, (_, i) => start + i * step);\n\n        // Process first location. Add a for-loop for multiple locations or weather models\n        const response = responses[0];\n\n        // Attributes for timezone and location\n        const utcOffsetSeconds = response.utcOffsetSeconds();\n        const timezone = response.timezone();\n        const timezoneAbbreviation = response.timezoneAbbreviation();\n        const latitude = response.latitude();\n        const longitude = response.longitude();\n        const hourly = response.hourly();\n        console.log(hourly.variables);\n\n        // Note: The order of weather variables in the URL query and the indices below need to match!\n        const weatherData = {\n          hourly: {\n            time: range(Number(hourly.time()), Number(hourly.timeEnd()), hourly.interval()).map(t => new Date((t + utcOffsetSeconds) * 1000)),\n            precipitationProbability: hourly.variables(0).valuesArray()\n          }\n        };\n\n        // `weatherData` now contains a simple structure with arrays for datetime and weather data\n        for (let i = 0; i < weatherData.hourly.time.length; i++) {\n          console.log(\n          //weatherData.hourly.time[i].toISOString(),\n          weatherData.hourly.precipitationProbability[i]);\n        }\n      } else {\n        alert(\"Could not find city \" + {\n          name\n        }.name);\n        return null;\n      }\n    } catch (error) {\n      console.log({\n        error\n      });\n      alert(\"Error in finding city \" + {\n        name\n      }.name);\n      return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"row justify-content-center\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          class: \"menu-button\",\n          onClick: () => getCity(\"Austin\"),\n          children: \"Austin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"row justify-content-center\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          class: \"menu-button\",\n          onClick: () => getCity(\"Chicago\"),\n          children: \"Chicago\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"row justify-content-center\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          class: \"menu-button\",\n          onClick: () => getCity(\"Las Vegas\"),\n          children: \"Las Vegas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"row justify-content-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"col-4\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            width: \"80px\",\n            type: \"text\",\n            value: search,\n            onChange: e => setSearch(e.target.value),\n            placeholder: \"Search an artist\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"col-4\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: searchCity,\n            children: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"LY8mP7LSXLeZRQSfYed3cXfz6JE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","SongList","displayWeather","fetchWeatherApi","jsxDEV","_jsxDEV","menuItems","App","_s","search","setSearch","weather","setWeather","searchCity","getCity","name","console","log","res","fetch","results","json","length","params","latitude","url","responses","range","start","stop","step","Array","from","_","i","response","utcOffsetSeconds","timezone","timezoneAbbreviation","longitude","hourly","variables","weatherData","time","Number","timeEnd","interval","map","t","Date","precipitationProbability","valuesArray","alert","error","children","class","type","onClick","fileName","_jsxFileName","lineNumber","columnNumber","width","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Thomas/Documents/GitHub/cs378-p3/src/App.js"],"sourcesContent":["import './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'; \r\nimport React, { useState } from 'react';\r\nimport SongList, { displayWeather } from \"./components/WeatherList\"\r\nimport { fetchWeatherApi } from 'openmeteo';\r\n\r\n// import 'bootstrap/dist/css/bootstrap.min.css'; // This imports bootstrap css styles. You can use bootstrap or your own classes by using the className attribute in your elements.\r\n\r\n// Menu data. An array of objects where each object represents a menu item. Each menu item has an id, title, description, image name, and price.\r\n// You can use the image name to get the image from the images folder.\r\nconst menuItems = [\r\n  {\r\n\r\n  }\r\n];\r\n\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n  const [search, setSearch] = useState(\"\");\r\n  const [weather, setWeather] = useState([]);\r\n\r\n\r\n  const searchCity = () => {\r\n    return getCity(search);\r\n  }\r\n\r\n  const getCity = async (name) => {\r\n    console.log({name}.name);\r\n    console.log('https://geocoding-api.open-meteo.com/v1/search?name=' + {name}.name);\r\n    try {\r\n        const res = await fetch('https://geocoding-api.open-meteo.com/v1/search?name=' + {name}.name);\r\n        const results = await res.json();\r\n        console.log(results.results[0]);\r\n        if (results.results && results.results.length > 0) {\r\n\t\r\n          const params = {\r\n            \"latitude\": results.results[0].latitude,\r\n            \"longitude\": results.results[0].latitude,\r\n            \"hourly\": \"precipitation_probability\",\r\n            \"timezone\": \"America/Chicago\",\r\n            \"forecast_days\": 1,\r\n          };\r\n            const url = \"https://api.open-meteo.com/v1/forecast\";\r\n            const responses = await fetchWeatherApi(url, params);\r\n            \r\n            // Helper function to form time ranges\r\n            const range = (start, stop, step) =>\r\n              Array.from({ length: (stop - start) / step }, (_, i) => start + i * step);\r\n            \r\n            // Process first location. Add a for-loop for multiple locations or weather models\r\n            const response = responses[0];\r\n            \r\n            // Attributes for timezone and location\r\n            const utcOffsetSeconds = response.utcOffsetSeconds();\r\n            const timezone = response.timezone();\r\n            const timezoneAbbreviation = response.timezoneAbbreviation();\r\n            const latitude = response.latitude();\r\n            const longitude = response.longitude();\r\n            \r\n            const hourly = response.hourly();\r\n            console.log(hourly.variables)\r\n            \r\n            // Note: The order of weather variables in the URL query and the indices below need to match!\r\n            const weatherData = {\r\n            \r\n                            hourly: {\r\n                time: range(Number(hourly.time()), Number(hourly.timeEnd()), hourly.interval()).map(\r\n                  (t) => new Date((t + utcOffsetSeconds) * 1000)\r\n                ),\r\n                precipitationProbability: hourly.variables(0).valuesArray(),\r\n              },\r\n            \r\n            };\r\n            \r\n            // `weatherData` now contains a simple structure with arrays for datetime and weather data\r\n            for (let i = 0; i < weatherData.hourly.time.length; i++) {\r\n              console.log(\r\n                //weatherData.hourly.time[i].toISOString(),\r\n                weatherData.hourly.precipitationProbability[i]\r\n              );\r\n            }\r\n            \r\n\r\n        } else {\r\n            alert(\"Could not find city \" + {name}.name);\r\n            return null;\r\n        }\r\n    } catch (error) {\r\n        console.log({error});\r\n        alert(\"Error in finding city \" + {name}.name);\r\n        return null;\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div class='container'>\r\n        <div class=\"row justify-content-center\">\r\n          <button type=\"button\" class=\"menu-button\" onClick={() => getCity(\"Austin\")}>\r\n            Austin\r\n          </button>\r\n        </div>\r\n        <div class='row justify-content-center'>\r\n          <button type=\"button\" class=\"menu-button\" onClick={() => getCity(\"Chicago\")}>\r\n            Chicago\r\n          </button>\r\n        </div>\r\n        <div class='row justify-content-center'>\r\n          <button type=\"button\" class=\"menu-button\" onClick={() => getCity(\"Las Vegas\")}>\r\n            Las Vegas\r\n          </button>\r\n        </div>\r\n        <div class=\"row justify-content-center\">\r\n          <div class=\"col-4\">\r\n            <input \r\n              width=\"80px\"\r\n              type=\"text\"\r\n              value={search}\r\n              onChange={(e) => setSearch(e.target.value)}\r\n              placeholder=\"Search an artist\"\r\n            />\r\n          </div>\r\n          <div class=\"col-4\">\r\n            <button \r\n              onClick={searchCity}\r\n            >\r\n              Search\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}